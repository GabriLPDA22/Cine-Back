¿Por qué se recomienda usar DTOs?
Seguridad:

Cuando trabajas directamente con tus modelos (como Usuario), existe el riesgo de exponer información sensible, como el hash de la contraseña (ContraseñaHash), fechas internas, IDs que no deberían ser públicos, etc.
Los DTOs te permiten controlar qué datos viajan entre el cliente y el servidor, minimizando el riesgo de exponer información innecesaria o sensible.
Flexibilidad:

Los DTOs te permiten cambiar la estructura interna del modelo sin impactar las respuestas de tu API o los datos esperados por el cliente. Por ejemplo:
Si decides agregar un campo nuevo al modelo Usuario (como FechaRegistro), no afecta las respuestas del cliente porque puedes simplemente no incluirlo en los DTOs.
Separación de Responsabilidades:

Usar DTOs hace que los modelos internos (que suelen estar ligados a la lógica del negocio o la base de datos) estén separados de la lógica de transferencia de datos, manteniendo el código más limpio y fácil de mantener.
Reducción de Datos Transferidos:

Los DTOs solo incluyen los campos necesarios para la operación específica (registro, login, etc.), lo que reduce el tamaño de las solicitudes/respuestas y mejora el rendimiento.
¿Cuándo podría no ser necesario usar DTOs?
Proyectos Pequeños:

Si tu aplicación es pequeña y sencilla, y no planeas ampliarla o exponerla a otros sistemas, puedes trabajar directamente con los modelos sin usar DTOs.
Poco Riesgo de Exposición:

Si el modelo que estás usando no contiene campos sensibles o internos que no deban ser enviados al cliente, podrías usarlo directamente.
Prototipos:

En proyectos rápidos o prototipos, puedes omitir los DTOs para simplificar el desarrollo inicial, pero debes estar preparado para refactorizar si el proyecto crece.